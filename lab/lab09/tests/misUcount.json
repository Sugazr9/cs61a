{"countData": {"SchemeSyntax": 4, "SchemeCons": 2, "SchemeEmpty": 1, "SchemeCdr": 6, "EvalExpr": 1, "SchemeDefine": 3}, "answerDict": {"scm> (define a '(1))\na\nscm> a\n(1)\nscm> (define b (cons 2 a))\nb\nscm> b\n(2 1)\nscm> (define c (list 3 b))\nLOCKED_ANSWER\nscm> c\nLOCKED_ANSWER\nscm> (car c)\nLOCKED_ANSWER\nscm> (cdr c)\nLOCKED_ANSWER\nscm> (car (car (cdr c)))\nLOCKED_ANSWER\nscm> (cdr (car (cdr c)))\nLOCKED_ANSWER\n": ["['(3 (2 1))']"], "scm> (define a '(1))\na\nscm> a\n(1)\nscm> (define b (cons 2 a))\nb\nscm> b\n(2 1)\nscm> (define c (list 3 b))\nc\nscm> c\n(3 (2 1))\nscm> (car c)\n3\nscm> (cdr c)\n((2 1))\nscm> (car (car (cdr c)))\n2\nscm> (cdr (car (cdr c)))\nLOCKED_ANSWER\n": ["['1']"], "scm> (define a '(1))\na\nscm> a\n(1)\nscm> (define b (cons 2 a))\nb\nscm> b\nLOCKED_ANSWER\nscm> (define c (list 3 b))\nLOCKED_ANSWER\nscm> c\nLOCKED_ANSWER\nscm> (car c)\nLOCKED_ANSWER\nscm> (cdr c)\nLOCKED_ANSWER\nscm> (car (car (cdr c)))\nLOCKED_ANSWER\nscm> (cdr (car (cdr c)))\nLOCKED_ANSWER\n": ["['(2 (1))']", "['(2 . 1)']", "['(2. (1))']", "['(2 . (1))']"], "scm> (define a '(1))\na\nscm> a\n(1)\nscm> (define b (cons 2 a))\nb\nscm> b\n(2 1)\nscm> (define c (list 3 b))\nc\nscm> c\n(3 (2 1))\nscm> (car c)\n3\nscm> (cdr c)\nLOCKED_ANSWER\nscm> (car (car (cdr c)))\nLOCKED_ANSWER\nscm> (cdr (car (cdr c)))\nLOCKED_ANSWER\n": ["['(2 1)']", "['2 1']", "[\"'(2 1)\"]", "['b']", "['Error']", "['3']"], "scm> lst\nLOCKED_ANSWER\n": ["['((1 nil) 2 (3 4) 5 nil)']"], "scm> (define a '(1))\nLOCKED_ANSWER\nscm> a\nLOCKED_ANSWER\nscm> (define b (cons 2 a))\nLOCKED_ANSWER\nscm> b\nLOCKED_ANSWER\nscm> (define c (list 3 b))\nLOCKED_ANSWER\nscm> c\nLOCKED_ANSWER\nscm> (car c)\nLOCKED_ANSWER\nscm> (cdr c)\nLOCKED_ANSWER\nscm> (car (car (cdr c)))\nLOCKED_ANSWER\nscm> (cdr (car (cdr c)))\nLOCKED_ANSWER\n": ["['(1)']", "['1']"]}}