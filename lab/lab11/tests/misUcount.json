{"answerDict": {">>> class IteratorA:\n...    def __init__(self):\n...        self.start = 10\n...    def __next__(self):\n...        if self.start > 100:\n...            raise StopIteration\n...        self.start += 20\n...        return self.start\n...    def __iter__(self):\n...        return self\n>>> iterator = IteratorA()\n>>> [num for num in iterator]\nLOCKED_ANSWER\n>>> [num for num in iterator]\nLOCKED_ANSWER\n": ["['[30, 50, 70, 90]']", "['[10, 30, 50, 70, 90]']"], ">>> def generator():\n...     print(\"Starting here\")\n...     i = 0\n...     while i < 6:\n...         print(\"Before yield\")\n...         yield i\n...         print(\"After yield\")\n...         i += 1\n>>> g = generator()\n>>> g == iter(g)\nTrue\n>>> next(g)\nStarting here\nBefore yield\n0\n>>> next(g)\nLOCKED_ANSWER\nLOCKED_ANSWER\nLOCKED_ANSWER\n>>> next(g)\nLOCKED_ANSWER\nLOCKED_ANSWER\nLOCKED_ANSWER\n": ["['Starting here']", "['Before yield']"]}, "countData": {"UseInitialValueWhenNotPartOfAnswer": 1, "YieldIsContinueNotReturn": 1, "GenSubsequentCallToNextActsLikeFirstCallToNext": 1, "OutOfOrderStopIterVsInc": 2}}